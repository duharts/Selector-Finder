javascript:(function(){let unitToAreaMap={};function getProcessedUnits(){try{const stored=localStorage.getItem('processedUnits');return stored?JSON.parse(stored):{}}catch(e){console.error('Error retrieving processed units:',e);return{}}}function saveProcessedUnit(unit){try{const processed=getProcessedUnits();processed[unit]=true;localStorage.setItem('processedUnits',JSON.stringify(processed))}catch(e){console.error('Error saving processed unit:',e)}}function resetProcessedUnits(){try{localStorage.removeItem('processedUnits')}catch(e){console.error('Error resetting processed units:',e)}}function createUI(){function loadScript(url,callback){const script=document.createElement('script');script.type='text/javascript';script.src=url;script.onload=callback;document.head.appendChild(script)}if(!window.XLSX){loadScript('https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js',continueInitUI);updateStatus('Loading required libraries...')}else{continueInitUI()}function continueInitUI(){const existingUI=document.getElementById('field-updater-ui');if(existingUI){document.body.removeChild(existingUI)}const panel=document.createElement('div');panel.id='field-updater-ui';panel.style=`
        position: fixed;
        top: 20px;
        right: 20px;
        width: 380px;
        background: white;
        border: 2px solid #3498db;
        border-radius: 8px;
        padding: 15px;
        z-index: 10000;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        font-family: Arial, sans-serif;
        max-height: 90vh;
        overflow-y: auto;
      `;const header=document.createElement('h2');header.textContent='Area Field Updater';header.style='margin-top: 0; margin-bottom: 15px; color: #2c3e50; font-size: 18px;';panel.appendChild(header);const importSection=document.createElement('div');importSection.style='margin-bottom: 20px; padding: 10px; background: #f8f9fa; border-radius: 6px;';const importHeader=document.createElement('h3');importHeader.textContent='Import Unit to Area Mapping';importHeader.style='margin-top: 0; margin-bottom: 10px; font-size: 16px; color: #2c3e50;';importSection.appendChild(importHeader);const importDescription=document.createElement('p');importDescription.textContent='Upload an Excel file with unit and area data. Format: Column A for unit numbers (e.g. "1A") and Column B for areas (e.g. "767").';importDescription.style='margin-bottom: 10px; font-size: 14px;';importSection.appendChild(importDescription);const fileInput=document.createElement('input');fileInput.type='file';fileInput.id='excel-upload';fileInput.accept='.xlsx, .xls, .csv';fileInput.style='margin-bottom: 10px;';importSection.appendChild(fileInput);const uploadButton=document.createElement('button');uploadButton.textContent='Load Excel Data';uploadButton.style=`
        width: 100%;
        padding: 8px 15px;
        background: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-bottom: 10px;
      `;uploadButton.onclick=handleExcelUpload;importSection.appendChild(uploadButton);const mappingDisplay=document.createElement('div');mappingDisplay.id='mapping-display';mappingDisplay.style=`
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 10px;
        max-height: 100px;
        overflow-y: auto;
        font-size: 12px;
        margin-bottom: 10px;
      `;mappingDisplay.innerHTML='<em>No unit-to-area mapping loaded yet. Please upload an Excel file.</em>';importSection.appendChild(mappingDisplay);panel.appendChild(importSection);const progressSection=document.createElement('div');progressSection.style='margin-bottom: 20px; padding: 10px; background: #f8f9fa; border-radius: 6px;';const processed=getProcessedUnits();const processedCount=Object.keys(processed).length;const totalUnits=Object.keys(unitToAreaMap).length;const progressHeader=document.createElement('div');progressHeader.style='display: flex; justify-content: space-between; margin-bottom: 10px;';progressHeader.innerHTML=`
        <strong>Progress:</strong>
        <span>${processedCount} of ${totalUnits} units processed</span>
      `;progressSection.appendChild(progressHeader);const progressBarContainer=document.createElement('div');progressBarContainer.style='height: 10px; background: #ddd; border-radius: 5px; overflow: hidden; margin-bottom: 10px;';const progressBar=document.createElement('div');const percentage=Math.round((processedCount/totalUnits)*100)||0;progressBar.style=`height: 100%; width: ${percentage}%; background: #2ecc71;`;progressBarContainer.appendChild(progressBar);progressSection.appendChild(progressBarContainer);const resetButton=document.createElement('button');resetButton.textContent='Reset Progress';resetButton.style=`
        padding: 5px 10px;
        background: #e74c3c;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
      `;resetButton.onclick=function(){if(confirm('Are you sure you want to reset progress? This will clear all tracked units.')){resetProcessedUnits();updateProgress()}};progressSection.appendChild(resetButton);panel.appendChild(progressSection);const searchSection=document.createElement('div');searchSection.style='margin-bottom: 20px;';const searchHeader=document.createElement('h3');searchHeader.textContent='Find Fields by Keyword';searchHeader.style='margin-top: 0; margin-bottom: 10px; font-size: 16px; color: #2c3e50;';searchSection.appendChild(searchHeader);const searchInput=document.createElement('div');searchInput.style='display: flex; margin-bottom: 10px;';const keywordInput=document.createElement('input');keywordInput.id='keyword-input';keywordInput.type='text';keywordInput.placeholder='unit, area, sqft, etc.';keywordInput.style=`
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px 0 0 4px;
        box-sizing: border-box;
      `;searchInput.appendChild(keywordInput);const searchButton=document.createElement('button');searchButton.textContent='Search';searchButton.style=`
        padding: 8px 15px;
        background: #3498db;
        color: white;
        border: none;
        border-radius: 0 4px 4px 0;
        cursor: pointer;
      `;searchButton.onclick=searchByKeyword;searchInput.appendChild(searchButton);searchSection.appendChild(searchInput);const keywordsContainer=document.createElement('div');keywordsContainer.style='display: flex; flex-wrap: wrap; gap: 5px; margin-bottom: 10px;';['unit','area','sqft','size'].forEach(keyword=>{const keywordButton=document.createElement('button');keywordButton.textContent=keyword;keywordButton.style=`
          padding: 4px 8px;
          background: #f1f1f1;
          border: 1px solid #ddd;
          border-radius: 15px;
          cursor: pointer;
          font-size: 12px;
        `;keywordButton.onclick=function(){document.getElementById('keyword-input').value=keyword;searchByKeyword()};keywordsContainer.appendChild(keywordButton)});searchSection.appendChild(keywordsContainer);const searchResults=document.createElement('div');searchResults.id='search-results';searchResults.style=`
        background: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 10px;
        max-height: 200px;
        overflow-y: auto;
        font-size: 14px;
        display: none;
      `;searchResults.innerHTML='<em>Search results will appear here</em>';searchSection.appendChild(searchResults);panel.appendChild(searchSection);const clickSection=document.createElement('div');clickSection.style='margin-bottom: 20px;';const clickHeader=document.createElement('h3');clickHeader.textContent='Click to Fill';clickHeader.style='margin-top: 0; margin-bottom: 10px; font-size: 16px; color: #2c3e50;';clickSection.appendChild(clickHeader);const clickDescription=document.createElement('p');clickDescription.textContent='Click on a unit field first, then on an area field to fill:';clickDescription.style='margin-bottom: 10px; font-size: 14px;';clickSection.appendChild(clickDescription);const clickButton=document.createElement('button');clickButton.id='click-mode-button';clickButton.textContent='Start Click Mode';clickButton.style=`
        width: 100%;
        padding: 10px;
        background: #2ecc71;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
      `;clickButton.onclick=startClickMode;clickSection.appendChild(clickButton);panel.appendChild(clickSection);const fillSection=document.createElement('div');fillSection.style='margin-bottom: 20px;';const fillHeader=document.createElement('h3');fillHeader.textContent='Auto-Fill Entire Form';fillHeader.style='margin-top: 0; margin-bottom: 10px; font-size: 16px; color: #2c3e50;';fillSection.appendChild(fillHeader);const fillDescription=document.createElement('p');fillDescription.textContent='Try to automatically fill all area fields:';fillDescription.style='margin-bottom: 10px; font-size: 14px;';fillSection.appendChild(fillDescription);const optionsContainer=document.createElement('div');optionsContainer.style='margin-bottom: 10px;';const skipContainer=document.createElement('div');skipContainer.style='margin-bottom: 10px;';const skipCheckbox=document.createElement('input');skipCheckbox.type='checkbox';skipCheckbox.id='skip-processed';skipCheckbox.checked=true;skipContainer.appendChild(skipCheckbox);const skipLabel=document.createElement('label');skipLabel.htmlFor='skip-processed';skipLabel.textContent=' Skip already processed units';skipLabel.style='margin-left: 5px;';skipContainer.appendChild(skipLabel);optionsContainer.appendChild(skipContainer);const delayContainer=document.createElement('div');delayContainer.style='margin-bottom: 10px;';const delayLabel=document.createElement('label');delayLabel.textContent='Delay between fields (ms):';delayLabel.style='display: block; margin-bottom: 5px;';delayContainer.appendChild(delayLabel);const delayInput=document.createElement('input');delayInput.type='range';delayInput.id='delay-input';delayInput.min='100';delayInput.max='2000';delayInput.step='100';delayInput.value='500';delayInput.style='width: 100%;';delayContainer.appendChild(delayInput);const delayValue=document.createElement('div');delayValue.id='delay-value';delayValue.textContent='500 ms';delayValue.style='text-align: center; font-size: 12px;';delayContainer.appendChild(delayValue);delayInput.oninput=function(){document.getElementById('delay-value').textContent=`${this.value} ms`};optionsContainer.appendChild(delayContainer);fillSection.appendChild(optionsContainer);const fillButton=document.createElement('button');fillButton.textContent='Auto-Fill All Fields';fillButton.style=`
        width: 100%;
        padding: 10px;
        background: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
      `;fillButton.onclick=autoFillAllFields;fillSection.appendChild(fillButton);panel.appendChild(fillSection);const debugSection=document.createElement('div');debugSection.style='margin-bottom: 20px;';const debugHeader=document.createElement('h3');debugHeader.textContent='Field Testing & Debugging';debugHeader.style='margin-top: 0; margin-bottom: 10px; font-size: 16px; color: #2c3e50;';debugSection.appendChild(debugHeader);const debugDescription=document.createElement('p');debugDescription.textContent='Test field updating methods:';debugDescription.style='margin-bottom: 10px; font-size: 14px;';debugSection.appendChild(debugDescription);const debugButton=document.createElement('button');debugButton.textContent='Test Manual Update';debugButton.style=`
        width: 100%;
        padding: 10px;
        background: #9b59b6;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        margin-bottom: 10px;
      `;debugButton.onclick=startDebugMode;debugSection.appendChild(debugButton);panel.appendChild(debugSection);const statusSection=document.createElement('div');statusSection.style='margin-bottom: 15px;';const statusHeader=document.createElement('h3');statusHeader.textContent='Status';statusHeader.style='margin-top: 0; margin-bottom: 10px; font-size: 16px; color: #2c3e50;';statusSection.appendChild(statusHeader);const exportButton=document.createElement('button');exportButton.textContent='Export Progress';exportButton.style=`
        width: 100%;
        padding: 8px;
        background: #2980b9;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-bottom: 10px;
      `;exportButton.onclick=exportProcessedUnits;statusSection.appendChild(exportButton);const statusBox=document.createElement('div');statusBox.id='status-box';statusBox.style=`
        background: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 10px;
        font-size: 14px;
        min-height: 60px;
      `;statusBox.innerHTML='<em>Ready to update area fields</em>';statusSection.appendChild(statusBox);panel.appendChild(statusSection);const closeButton=document.createElement('button');closeButton.textContent='Close';closeButton.style=`
        width: 100%;
        padding: 8px;
        background: #95a5a6;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      `;closeButton.onclick=function(){document.body.removeChild(panel)};panel.appendChild(closeButton);document.body.appendChild(panel);return panel}}function handleExcelUpload(){const fileInput=document.getElementById('excel-upload');const file=fileInput.files[0];if(!file){updateStatus('Please select an Excel file first.');return}updateStatus('Reading Excel file...');const reader=new FileReader();reader.onload=function(e){try{const data=new Uint8Array(e.target.result);const workbook=XLSX.read(data,{type:'array'});const firstSheetName=workbook.SheetNames[0];const worksheet=workbook.Sheets[firstSheetName];const excelData=XLSX.utils.sheet_to_json(worksheet,{header:'A'});if(excelData.length>0){unitToAreaMap={};let startRow=0;if(isNaN(parseInt(excelData[0].B))){startRow=1}for(let i=startRow;i<excelData.length;i++){const row=excelData[i];if(row.A&&row.B){const unit=row.A.toString().trim();const area=parseInt(row.B);if(unit&&!isNaN(area)){unitToAreaMap[unit]=area}}}updateMappingDisplay();updateProgress();updateStatus(`Successfully loaded ${Object.keys(unitToAreaMap).length} units from Excel file.`)}else{updateStatus('Excel file appears to be empty. Please check the file format.')}}catch(err){console.error('Excel parsing error:',err);updateStatus('Error parsing Excel file. Please check the file format.')}};reader.onerror=function(){updateStatus('Error reading file. Please try again.')};reader.readAsArrayBuffer(file)}function updateMappingDisplay(){const display=document.getElementById('mapping-display');if(!display)return;const unitCount=Object.keys(unitToAreaMap).length;if(unitCount===0){display.innerHTML='<em>No unit-to-area mapping loaded yet. Please upload an Excel file.</em>';return}let html=`<strong>${unitCount} units loaded:</strong><br>`;const units=Object.keys(unitToAreaMap).sort();const samplesToShow=Math.min(10,units.length);for(let i=0;i<samplesToShow;i++){const unit=units[i];html+=`${unit}: ${unitToAreaMap[unit]} sq ft<br>`}if(units.length>10){html+=`<em>...and ${units.length-10} more units</em>`}display.innerHTML=html}function updateProgress(){const processed=getProcessedUnits();const processedCount=Object.keys(processed).length;const totalUnits=Object.keys(unitToAreaMap).length;const percentage=Math.round((processedCount/totalUnits)*100)||0;const progressHeader=document.querySelector('#field-updater-ui > div:nth-of-type(2) > div:first-of-type');if(progressHeader){progressHeader.innerHTML=`
        <strong>Progress:</strong>
        <span>${processedCount} of ${totalUnits} units processed</span>
      `}const progressBar=document.querySelector('#field-updater-ui > div:nth-of-type(2) > div:nth-of-type(2) > div');if(progressBar){progressBar.style.width=`${percentage}%`}}function searchByKeyword(){const keyword=document.getElementById('keyword-input').value.trim().toLowerCase();const resultsContainer=document.getElementById('search-results');if(!keyword){updateStatus('Please enter a keyword to search');return}resultsContainer.style.display='block';resultsContainer.innerHTML='<em>Searching for fields matching "'+keyword+'"...</em>';const allFields=document.querySelectorAll('input, select, textarea');if(allFields.length===0){resultsContainer.innerHTML='<em>No form fields found on the page</em>';return}const matches=[];for(const field of allFields){let confidence=0;let matchReasons=[];const valueText=field.value||'';const placeholderText=(field.placeholder||'').toLowerCase();const nameText=(field.name||'').toLowerCase();const idText=(field.id||'').toLowerCase();const classText=(field.className||'').toLowerCase();const ngModel=(field.getAttribute('ng-model')||'').toLowerCase();if(placeholderText.includes(keyword)){confidence+=10;matchReasons.push(`Placeholder contains "${keyword}"`)}if(nameText.includes(keyword)){confidence+=8;matchReasons.push(`Name contains "${keyword}"`)}if(idText.includes(keyword)){confidence+=7;matchReasons.push(`ID contains "${keyword}"`)}if(ngModel&&ngModel.includes(keyword)){confidence+=12;matchReasons.push(`Angular model contains "${keyword}"`)}if(valueText.toLowerCase().includes(keyword)){confidence+=5;matchReasons.push(`Value contains "${keyword}"`)}if(keyword==='unit'||keyword==='apt'||keyword==='apartment'){if(/^\d+[A-Za-z]$/.test(valueText.trim())){confidence+=15;matchReasons.push('Value looks like a unit number (e.g., "1A")')}}if(keyword==='area'||keyword==='sqft'||keyword==='footage'||keyword==='size'){if(!isNaN(valueText)&&valueText>100&&valueText<10000){confidence+=15;matchReasons.push('Value looks like square footage (100-10000)')}}let parent=field.parentElement;if(parent){let parentText='';for(const node of parent.childNodes){if(node.nodeType===Node.TEXT_NODE){parentText+=node.textContent}}parentText=parentText.toLowerCase().trim();if(parentText.includes(keyword)){confidence+=6;matchReasons.push(`Parent text contains "${keyword}"`)}}if(field.id){const label=document.querySelector(`label[for="${field.id}"]`);if(label&&label.textContent.toLowerCase().includes(keyword)){confidence+=10;matchReasons.push(`Label contains "${keyword}"`)}}if(confidence>0){matches.push({element:field,confidence,matchReasons,valueText,placeholderText,nameText,idText,ngModel})}}matches.sort((a,b)=>b.confidence-a.confidence);if(matches.length===0){resultsContainer.innerHTML=`<em>No fields found matching "${keyword}"</em>`;return}let html=`<strong>Found ${matches.length} fields matching "${keyword}":</strong><br><br>`;for(let i=0;i<Math.min(10,matches.length);i++){const match=matches[i];let confidenceLevel='Low';let confidenceColor='#e67e22';if(match.confidence>=20){confidenceLevel='Very High';confidenceColor='#27ae60'}else if(match.confidence>=10){confidenceLevel='High';confidenceColor='#2ecc71'}else if(match.confidence>=5){confidenceLevel='Medium';confidenceColor='#f39c12'}html+=`<div style="margin-bottom: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; background: white;">`;html+=`<div style="display: flex; justify-content: space-between; margin-bottom: 5px;">`;html+=`<strong>${match.element.tagName.toLowerCase()}</strong>`;html+=`<span style="background: ${confidenceColor}; padding: 2px 5px; border-radius: 4px; color: white; font-size: 12px;">
        ${confidenceLevel}
      </span>`;html+=`</div>`;html+=`<div style="margin-bottom: 5px; font-size: 12px;">`;if(match.valueText)html+=`Value: "${match.valueText}"<br>`;if(match.placeholderText)html+=`Placeholder: "${match.placeholderText}"<br>`;if(match.nameText)html+=`Name: "${match.nameText}"<br>`;if(match.idText)html+=`ID: "${match.idText}"<br>`;if(match.ngModel)html+=`Angular model: "${match.ngModel}"<br>`;html+=`</div>`;html+=`<div style="margin-bottom: 5px; font-size: 12px; color: #666;">`;html+=match.matchReasons.join(', ');html+=`</div>`;html+=`<div style="display: flex; gap: 5px;">`;html+=`<button onclick="window.highlightElement(${i})" style="flex: 1; background: #3498db; color: white; border: none; border-radius: 3px; padding: 5px; cursor: pointer; font-size: 12px;">Highlight</button>`;if(keyword==='unit'||keyword==='apt'||keyword==='apartment'){html+=`<button onclick="window.selectUnitField(${i})" style="flex: 1; background: #9b59b6; color: white; border: none; border-radius: 3px; padding: 5px; cursor: pointer; font-size: 12px;">Use as Unit</button>`}else if(keyword==='area'||keyword==='sqft'||keyword==='footage'||keyword==='size'){html+=`<button onclick="window.selectAreaField(${i})" style="flex: 1; background: #2ecc71; color: white; border: none; border-radius: 3px; padding: 5px; cursor: pointer; font-size: 12px;">Use as Area</button>`}html+=`</div>`;html+=`</div>`}if(matches.length>10){html+=`<em>...and ${matches.length-10} more matches</em>`}resultsContainer.innerHTML=html;window.searchMatches=matches;window.highlightElement=function(index){const match=window.searchMatches[index];if(match&&match.element){highlightField(match.element);scrollToElement(match.element)}};window.selectUnitField=function(index){const match=window.searchMatches[index];if(match&&match.element){window.selectedUnitField=match.element;highlightField(match.element,'#9b59b6');updateStatus(`Selected unit field with value "${match.valueText||'empty'}". Now search for an area field.`)}};window.selectAreaField=function(index){const match=window.searchMatches[index];if(match&&match.element){if(window.selectedUnitField){const unitElement=window.selectedUnitField;const unitValue=getElementValue(unitElement);if(unitValue){const unitCode=extractUnitCode(unitValue);if(unitCode&&unitToAreaMap[unitCode]){const areaValue=unitToAreaMap[unitCode];try{const detailedStatus=updateFieldWithAllMethodsDetailed(match.element,areaValue);highlightField(match.element,detailedStatus.success?'#2ecc71':'#e74c3c');if(detailedStatus.success){saveProcessedUnit(unitCode);updateProgress();updateStatus(`Successfully updated area field for unit ${unitCode} with ${areaValue} sq ft using ${detailedStatus.method}!`)}else{updateStatus(`Failed to update area field for unit ${unitCode}. ${detailedStatus.error}`)}}catch(e){highlightField(match.element,'#e74c3c');updateStatus(`Error updating area field: ${e.message}`)}}else{updateStatus(`Could not find area data for unit value "${unitValue}".`)}}else{updateStatus('Selected unit field has no value. Please select a field with a unit number.')}window.selectedUnitField=null}else{updateStatus('Please select a unit field first by searching for "unit".')}}};}function startClickMode(){const statusBox=document.getElementById('status-box');const clickButton=document.getElementById('click-mode-button');clickButton.textContent='Stop Click Mode';clickButton.style.background='#e74c3c';clickButton.onclick=stopClickMode;statusBox.innerHTML=`<strong>Click Mode Active</strong><br>First click on a unit field, then click on an area field.`;window.selectedUnit=null;const overlay=document.createElement('div');overlay.id='click-mode-overlay';overlay.style=`
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(46, 204, 113, 0.1);
      z-index: 9999;
      cursor: crosshair;
      pointer-events: none;
    `;document.body.appendChild(overlay);const indicator=document.createElement('div');indicator.id='click-mode-indicator';indicator.style=`
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 10px 15px;
      border-radius: 20px;
      z-index: 10001;
      font-family: Arial, sans-serif;
      font-size: 14px;
    `;indicator.textContent='Click on a unit field';document.body.appendChild(indicator);document.addEventListener('click',clickModeHandler,true)}function clickModeHandler(e){const element=e.target;if(element.tagName!=='INPUT'&&element.tagName!=='SELECT'&&element.tagName!=='TEXTAREA'){return}if(element.closest('#field-updater-ui')){return}e.preventDefault();e.stopPropagation();const statusBox=document.getElementById('status-box');const indicator=document.getElementById('click-mode-indicator');if(!window.selectedUnit){const value=getElementValue(element);const unitCode=extractUnitCode(value);if(unitCode&&unitToAreaMap[unitCode]){window.selectedUnit=unitCode;highlightField(element,'#9b59b6');indicator.textContent=`Unit ${unitCode} selected! Now click the area field`;statusBox.innerHTML=`<strong>Unit Selected:</strong> ${unitCode} (${unitToAreaMap[unitCode]} sq ft)<br>Now click on the area field.`}else{indicator.textContent='No unit found! Try another field';statusBox.innerHTML=`<strong>No unit found!</strong><br>Click on a field containing a valid unit number (e.g., "1A").`}}else{const unit=window.selectedUnit;const areaValue=unitToAreaMap[unit];try{const detailedStatus=updateFieldWithAllMethodsDetailed(element,areaValue);if(detailedStatus.success){saveProcessedUnit(unit);highlightField(element,'#2ecc71');indicator.textContent=`Updated area to ${areaValue} for unit ${unit}! Click another unit field`;statusBox.innerHTML=`<strong>Success!</strong><br>Updated area field for unit ${unit} with ${areaValue} sq ft using ${detailedStatus.method}.<br>Click on another unit field to continue.`;updateProgress()}else{highlightField(element,'#e74c3c');indicator.textContent='Update failed! Try another field';statusBox.innerHTML=`<strong>Update Failed!</strong><br>Could not update area field for unit ${unit}. Error: ${detailedStatus.error}<br>Try a different field.`}}catch(e){highlightField(element,'#e74c3c');indicator.textContent='Error updating field!';statusBox.innerHTML=`<strong>Error!</strong><br>${e.message}`}window.selectedUnit=null}}function stopClickMode(){document.removeEventListener('click',clickModeHandler,true);const overlay=document.getElementById('click-mode-overlay');if(overlay){document.body.removeChild(overlay)}const indicator=document.getElementById('click-mode-indicator');if(indicator){document.body.removeChild(indicator)}const clickButton=document.getElementById('click-mode-button');clickButton.textContent='Start Click Mode';clickButton.style.background='#2ecc71';clickButton.onclick=startClickMode;const statusBox=document.getElementById('status-box');statusBox.innerHTML='<em>Click Mode stopped</em>';window.selectedUnit=null}function startDebugMode(){const statusBox=document.getElementById('status-box');statusBox.innerHTML='<strong>Debug Mode</strong><br>Select an area field to test all update methods.';const overlay=document.createElement('div');overlay.id='debug-mode-overlay';overlay.style=`
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(155, 89, 182, 0.1);
      z-index: 9999;
      cursor: crosshair;
      pointer-events: none;
    `;document.body.appendChild(overlay);const indicator=document.createElement('div');indicator.id='debug-mode-indicator';indicator.style=`
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 10px 15px;
      border-radius: 20px;
      z-index: 10001;
      font-family: Arial, sans-serif;
      font-size: 14px;
    `;indicator.textContent='Click on an area field to test update methods';document.body.appendChild(indicator);document.addEventListener('click',debugModeHandler,true);const debugButton=document.querySelector('#field-updater-ui > div:nth-of-type(5) > button');debugButton.textContent='Stop Testing';debugButton.style.background='#e74c3c';debugButton.onclick=stopDebugMode}function debugModeHandler(e){const element=e.target;if(element.tagName!=='INPUT'&&element.tagName!=='SELECT'&&element.tagName!=='TEXTAREA'){return}if(element.closest('#field-updater-ui')){return}e.preventDefault();e.stopPropagation();const value=getElementValue(element);const placeholderText=element.placeholder||'';const nameText=element.name||'';const idText=element.id||'';const ngModel=element.getAttribute('ng-model')||'';highlightField(element,'#9b59b6');const statusBox=document.getElementById('status-box');let infoHtml=`<strong>Selected Field:</strong><br>`;infoHtml+=`Type: ${element.tagName.toLowerCase()}<br>`;if(value)infoHtml+=`Value: "${value}"<br>`;if(placeholderText)infoHtml+=`Placeholder: "${placeholderText}"<br>`;if(nameText)infoHtml+=`Name: "${nameText}"<br>`;if(idText)infoHtml+=`ID: "${idText}"<br>`;if(ngModel)infoHtml+=`Angular model: "${ngModel}"<br>`;infoHtml+=`<br><strong>Testing update methods...</strong><br>`;statusBox.innerHTML=infoHtml;setTimeout(()=>{testAllUpdateMethods(element,999)},100)}function stopDebugMode(){document.removeEventListener('click',debugModeHandler,true);const overlay=document.getElementById('debug-mode-overlay');if(overlay){document.body.removeChild(overlay)}const indicator=document.getElementById('debug-mode-indicator');if(indicator){document.body.removeChild(indicator)}const debugButton=document.querySelector('#field-updater-ui > div:nth-of-type(5) > button');debugButton.textContent='Test Manual Update';debugButton.style.background='#9b59b6';debugButton.onclick=startDebugMode;const statusBox=document.getElementById('status-box');statusBox.innerHTML='<em>Testing mode stopped</em>'}function testAllUpdateMethods(element,testValue){const statusBox=document.getElementById('status-box');let resultsHtml=statusBox.innerHTML;try{const originalValue=element.value;element.value=testValue;const success=(element.value==testValue);element.value=originalValue;resultsHtml+=`Method 1 (Direct value): ${success?'✅ Works':'❌ Failed'}<br>`}catch(e){resultsHtml+=`Method 1 (Direct value): ❌ Error - ${e.message}<br>`}statusBox.innerHTML=resultsHtml;setTimeout(()=>{try{const originalValue=element.value;element.value=testValue;const inputEvent=new Event('input',{bubbles:true});element.dispatchEvent(inputEvent);const changeEvent=new Event('change',{bubbles:true});element.dispatchEvent(changeEvent);const success=(element.value==testValue);element.value=originalValue;resultsHtml+=`Method 2 (Value + Events): ${success?'✅ Works':'❌ Failed'}<br>`}catch(e){resultsHtml+=`Method 2 (Value + Events): ❌ Error - ${e.message}<br>`}statusBox.innerHTML=resultsHtml;setTimeout(()=>{try{const originalValue=element.value;const ngModel=element.getAttribute('ng-model');if(ngModel&&window.angular){try{const angularElement=window.angular.element(element);if(angularElement.scope){const scope=angularElement.scope();if(scope){try{const parts=ngModel.split('.');let current=scope;for(let i=0;i<parts.length-1;i++){if(!current[parts[i]]){throw new Error(`Cannot find object path ${parts[i]} in scope`)}current=current[parts[i]]}const lastPart=parts[parts.length-1];current[lastPart]=testValue;if(scope.$apply&&typeof scope.$apply==='function'){scope.$apply()}const success=(element.value==testValue);current[lastPart]=originalValue;if(scope.$apply&&typeof scope.$apply==='function'){scope.$apply()}resultsHtml+=`Method 3 (Angular model): ${success?'✅ Works':'❌ Failed'}<br>`}catch(e){resultsHtml+=`Method 3 (Angular model): ❌ Error - ${e.message}<br>`}}else{resultsHtml+=`Method 3 (Angular model): ❌ No scope found<br>`}}else{resultsHtml+=`Method 3 (Angular model): ❌ Angular found but no scope<br>`}}catch(e){resultsHtml+=`Method 3 (Angular model): ❌ Error getting scope - ${e.message}<br>`}}else{resultsHtml+=`Method 3 (Angular model): ❌ No ng-model attribute or Angular not found<br>`}}catch(e){resultsHtml+=`Method 3 (Angular model): ❌ Error - ${e.message}<br>`}statusBox.innerHTML=resultsHtml;setTimeout(()=>{try{const originalValue=element.value;element.focus();element.value='';const valueText=testValue.toString();for(let i=0;i<valueText.length;i++){element.value+=valueText.charAt(i);element.dispatchEvent(new Event('input',{bubbles:true}))}element.dispatchEvent(new Event('change',{bubbles:true}));element.dispatchEvent(new Event('blur',{bubbles:true}));const success=(element.value==testValue);element.value=originalValue;resultsHtml+=`Method 4 (Focus & type): ${success?'✅ Works':'❌ Failed'}<br>`}catch(e){resultsHtml+=`Method 4 (Focus & type): ❌ Error - ${e.message}<br>`}statusBox.innerHTML=resultsHtml;resultsHtml+=`<br><strong>Testing complete.</strong><br>`;resultsHtml+=`When using "Auto-Fill" or "Click to Fill", all methods will be tried in sequence.`;statusBox.innerHTML=resultsHtml},250)},250)},250)}function autoFillAllFields(){const statusBox=document.getElementById('status-box');const skipProcessed=document.getElementById('skip-processed').checked;const delay=parseInt(document.getElementById('delay-input').value)||500;if(Object.keys(unitToAreaMap).length===0){statusBox.innerHTML='<strong>No mapping data!</strong><br>Please import an Excel file with unit-to-area mapping first.';return}statusBox.innerHTML='<em>Scanning for unit and area fields...</em>';const unitFields=[];const areaFields=[];const allInputs=document.querySelectorAll('input, select, textarea');for(const input of allInputs){if(input.type==='hidden')continue;const value=getElementValue(input);const unitCode=extractUnitCode(value);if(unitCode&&unitToAreaMap[unitCode]){unitFields.push({element:input,unit:unitCode});continue}const areaScore=getAreaFieldScore(input);if(areaScore>0){areaFields.push({element:input,score:areaScore})}}areaFields.sort((a,b)=>b.score-a.score);const fieldPairs=[];for(const unitField of unitFields){if(skipProcessed&&getProcessedUnits()[unitField.unit]){continue}const parent=unitField.element.parentElement;let areaField=null;if(parent){const inputsInParent=Array.from(parent.querySelectorAll('input, select, textarea'));const otherInputs=inputsInParent.filter(input=>input!==unitField.element);for(const input of otherInputs){const areaScore=getAreaFieldScore(input);if(areaScore>0){areaField=input;break}}if(!areaField&&otherInputs.length>0){const unitIndex=inputsInParent.indexOf(unitField.element);if(unitIndex!==-1&&unitIndex<inputsInParent.length-1){areaField=inputsInParent[unitIndex+1]}}}if(!areaField){let nextElement=unitField.element.nextElementSibling;while(nextElement&&!areaField){if(nextElement.tagName==='INPUT'||nextElement.tagName==='SELECT'||nextElement.tagName==='TEXTAREA'){areaField=nextElement;break}const inputs=nextElement.querySelectorAll('input, select, textarea');if(inputs.length>0){areaField=inputs[0];break}nextElement=nextElement.nextElementSibling}}if(areaField){fieldPairs.push({unitField:unitField.element,areaField:areaField,unit:unitField.unit,area:unitToAreaMap[unitField.unit]})}}if(fieldPairs.length===0&&areaFields.length>0){for(let i=0;i<unitFields.length;i++){const unitField=unitFields[i];if(skipProcessed&&getProcessedUnits()[unitField.unit]){continue}const areaField=i<areaFields.length?areaFields[i].element:(areaFields.length>0?areaFields[0].element:null);if(areaField){fieldPairs.push({unitField:unitField.element,areaField:areaField,unit:unitField.unit,area:unitToAreaMap[unitField.unit]})}}}if(fieldPairs.length===0){statusBox.innerHTML='<strong>No field pairs found!</strong><br>Either no unit fields were detected, or all have been processed already.';return}statusBox.innerHTML=`<strong>Found ${fieldPairs.length} unit-area field pairs</strong><br>Starting to fill area fields...`;let currentIndex=0;let filledCount=0;let errorCount=0;function processNextPair(){if(currentIndex>=fieldPairs.length){finishProcessing();return}const pair=fieldPairs[currentIndex];currentIndex++;statusBox.innerHTML=`<strong>Processing:</strong> Unit ${pair.unit} (${currentIndex} of ${fieldPairs.length})<br>Filling with ${pair.area} sq ft...`;try{const detailedStatus=updateFieldWithAllMethodsDetailed(pair.areaField,pair.area);if(detailedStatus.success){saveProcessedUnit(pair.unit);highlightField(pair.unitField,'#9b59b6');highlightField(pair.areaField,'#2ecc71');filledCount++}else{highlightField(pair.areaField,'#e74c3c');errorCount++}}catch(e){highlightField(pair.areaField,'#e74c3c');errorCount++}updateProgress();setTimeout(processNextPair,delay)}function finishProcessing(){if(filledCount>0){statusBox.innerHTML=`<strong>Auto-Fill Complete!</strong><br>Successfully filled ${filledCount} of ${fieldPairs.length} area fields.`;if(errorCount>0){statusBox.innerHTML+=`<br>${errorCount} fields could not be updated.`}}else{statusBox.innerHTML=`<strong>Auto-Fill Failed!</strong><br>Could not update any area fields. Try using Click Mode instead.`}}processNextPair()}function getAreaFieldScore(element){let score=0;if(!element)return score;if(element.type==='hidden')return score;const value=getElementValue(element);if(!isNaN(value)&&value>100&&value<10000){score+=10}const placeholder=(element.placeholder||'').toLowerCase();const name=(element.name||'').toLowerCase();const id=(element.id||'').toLowerCase();const className=(element.className||'').toLowerCase();const ngModel=(element.getAttribute('ng-model')||'').toLowerCase();const areaTerms=['area','sqft','sq ft','footage','square','size'];for(const term of areaTerms){if(placeholder.includes(term))score+=4;if(name.includes(term))score+=3;if(id.includes(term))score+=3;if(ngModel&&ngModel.includes(term))score+=5}return score}function extractUnitCode(value){if(!value)return null;value=value.toString().trim();if(unitToAreaMap[value]){return value}const match=value.match(/(?:Unit|Apt|Apartment)?\s*([0-9]+[A-Za-z]|[A-Za-z][0-9]+)/i);if(match&&unitToAreaMap[match[1]]){return match[1]}return null}function getElementValue(element){if(!element)return'';if(element.tagName==='INPUT'||element.tagName==='SELECT'||element.tagName==='TEXTAREA'){return element.value||''}return element.textContent||''}function updateFieldWithAllMethodsDetailed(element,value){if(!element){return{success:false,method:'none',error:'No element provided'}}try{element.value=value;const inputEvent=new Event('input',{bubbles:true});element.dispatchEvent(inputEvent);const changeEvent=new Event('change',{bubbles:true});element.dispatchEvent(changeEvent);const blurEvent=new Event('blur',{bubbles:true});element.dispatchEvent(blurEvent);if(element.value==value){return{success:true,method:'direct value + events',error:null}}}catch(e){console.error('Method 1 error:',e)}try{const ngModel=element.getAttribute('ng-model');if(ngModel){let scope=null;if(window.angular){try{const angularElement=window.angular.element(element);if(angularElement.scope){scope=angularElement.scope()}}catch(e){console.error('Angular scope error:',e)}}if(scope){try{const parts=ngModel.split('.');let current=scope;for(let i=0;i<parts.length-1;i++){if(current[parts[i]]){current=current[parts[i]]}else{break}}const lastPart=parts[parts.length-1];current[lastPart]=value;if(scope.$apply&&typeof scope.$apply==='function'){scope.$apply()}if(element.value==value){return{success:true,method:'Angular model update',error:null}}}catch(e){console.error('Angular model update error:',e)}}}}catch(e){console.error('Method 2 error:',e)}try{element.focus();element.value='';const valueText=value.toString();for(let i=0;i<valueText.length;i++){element.value+=valueText.charAt(i);element.dispatchEvent(new Event('input',{bubbles:true}));try{const key=valueText.charAt(i);const keyEvent=new KeyboardEvent('keydown',{key:key,code:`Key${key.toUpperCase()}`,keyCode:key.charCodeAt(0),which:key.charCodeAt(0),bubbles:true});element.dispatchEvent(keyEvent)}catch(e){}}element.dispatchEvent(new Event('change',{bubbles:true}));element.dispatchEvent(new Event('blur',{bubbles:true}));if(element.value==value){return{success:true,method:'focus and type',error:null}}}catch(e){console.error('Method 3 error:',e)}try{const originalValue=element.value;return new Promise((resolve)=>{setTimeout(()=>{try{element.value=value;if(window.angular){try{const rootScope=window.angular.element(document.body).scope();if(rootScope&&rootScope.$root&&rootScope.$root.$digest){rootScope.$root.$digest()}}catch(e){}}setTimeout(()=>{try{element.dispatchEvent(new Event('input',{bubbles:true}));element.dispatchEvent(new Event('change',{bubbles:true}));element.dispatchEvent(new Event('blur',{bubbles:true}));if(element.value==value){resolve({success:true,method:'setTimeout property update',error:null})}else{element.value=originalValue;resolve({success:false,method:'none',error:'All methods failed to update field value'})}}catch(e){element.value=originalValue;resolve({success:false,method:'none',error:`Error in delayed events: ${e.message}`})}},50)}catch(e){element.value=originalValue;resolve({success:false,method:'none',error:`Error in setTimeout: ${e.message}`})}},0)})}catch(e){console.error('Method 4 error:',e)}return{success:false,method:'none',error:'All methods failed to update field value'}}function updateFieldWithAllMethods(element,value){try{const result=updateFieldWithAllMethodsDetailed(element,value);if(result instanceof Promise){return result.then(detailedResult=>detailedResult.success)}return result.success}catch(e){console.error('Update error:',e);return false}}function highlightField(element,color='#3498db'){if(!element)return;const originalBackground=element.style.backgroundColor;const originalOutline=element.style.outline;const originalTransition=element.style.transition;element.style.transition='background-color 0.3s ease, outline 0.3s ease';element.style.backgroundColor=color+'33';element.style.outline=`2px solid ${color}`;scrollToElement(element);setTimeout(()=>{element.style.backgroundColor=originalBackground;element.style.outline=originalOutline;setTimeout(()=>{element.style.transition=originalTransition},300)},2000)}function scrollToElement(element){if(!element)return;try{element.scrollIntoView({behavior:'smooth',block:'center'})}catch(t){try{element.scrollIntoView()}catch(e){}}}function updateStatus(message){const statusBox=document.getElementById('status-box');if(statusBox){statusBox.innerHTML=message}}function exportProcessedUnits(){if(!window.XLSX){updateStatus('XLSX library not loaded. Cannot export to Excel.');return}const processed=getProcessedUnits();const processedUnits=Object.keys(processed).filter(unit=>processed[unit]);if(processedUnits.length===0){updateStatus('No units have been processed yet. Nothing to export.');return}const wsData=[['Unit','Area (sq ft)','Processed']];const allUnits=Object.keys(unitToAreaMap).sort();for(const unit of allUnits){wsData.push([unit,unitToAreaMap[unit],processed[unit]?'Yes':'No'])}const ws=XLSX.utils.aoa_to_sheet(wsData);const wb=XLSX.utils.book_new();XLSX.utils.book_append_sheet(wb,ws,'UnitAreaMapping');const filename='Unit_Area_Mapping_'+new Date().toISOString().slice(0,10)+'.xlsx';XLSX.writeFile(wb,filename);updateStatus(`Exported ${allUnits.length} units to Excel file: ${filename}`)}createUI();updateStatus(`<strong>Ready!</strong><br>First import your Excel file with unit and area data, then use the search or click mode to update fields.`);window.unitToAreaMap=unitToAreaMap})();
